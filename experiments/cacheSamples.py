# -*- coding: utf-8 -*-
# at top of your module
"""kingdomTreeWorking

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vHluSPtJg8CNMrO9Th9oSh992rIlb9od
"""
import torch
import random

offset_pairs = []
offsets = [-3, -1, 0, +1, +3]
total_samples = 1000000

for gold in range(5):
  for workers in range(6):
    for light in range(6):
      for heavy in range(6):
        for ranged in range(6):
          for barracks in range(2):
            for attack_workers in range(6):
              user_state  = [gold, workers, light, heavy,
                             ranged, barracks, barracks,
                             attack_workers]
              user_tensor = torch.tensor(user_state, dtype=torch.int64)

              for off in offsets:
                # add offset, but never go below 0
                enemy_state = [ max(0, val + off) for val in user_state ]
                enemy_tensor = torch.tensor(enemy_state, dtype=torch.int64)

                offset_pairs.append((user_tensor, enemy_tensor))
#print(len(offset_pairs))

all_pair_set = set(offset_pairs)

all_pairs = []

while len(all_pairs) < (total_samples - len(offset_pairs)): #100,000 ish list
  gold = random.randint(0, 5)
  workers = random.randint(0, 9)
  light = random.randint(0, 9)
  heavy = random.randint(0, 9)
  ranged = random.randint(0, 9)
  barracks = random.randint(0, 3)
  attack_workers = random.randint(0, 9)
  user_state  = [gold, workers, light, heavy,
                ranged, barracks, barracks,
                attack_workers]

  u_t = torch.tensor(user_state, dtype=torch.int64)

  enemy_gold = random.randint(0, 5)
  enemy_workers = random.randint(0, 9)
  enemy_light = random.randint(0, 9)
  enemy_heavy = random.randint(0, 9)
  enemy_ranged = random.randint(0, 9)
  enemy_barracks = random.randint(0, 3)
  enemy_attack_workers = random.randint(0, 9)
  enemy_state  = [enemy_gold, enemy_workers, enemy_light, enemy_heavy,
                enemy_ranged, enemy_barracks, enemy_barracks,
                enemy_attack_workers]

  e_t = torch.tensor(enemy_state, dtype=torch.int64)


  if (u_t, e_t) not in all_pair_set:
        all_pairs.append((u_t, e_t))
        all_pair_set.add((u_t, e_t)) #else we have a duplicate

#print(len(all_pairs))

combined_pairs = offset_pairs + all_pairs

flat = [ torch.cat([u, e], dim=0) for u,e in combined_pairs ]
samples_db = torch.stack(flat, dim=0)


torch.save(samples_db, 'samples_db.pt')
print("Saved samples_db.pt:", samples_db.shape)